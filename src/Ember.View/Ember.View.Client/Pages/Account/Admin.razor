@page "/account/admin"

@layout AccountLayout

@attribute [Authorize(Roles = "Admin")]

@inject HttpClient HttpClient
@inject IModalService Modal
@inject IJSRuntime JsRuntime


<div class="card md-4 wow fadeIn">
    <div class="card-body d-sm-flex justify-content-between">
        <Category CurrentCategory="currentCategory" Links="Links" SelectedLink="SelectedLink" />

        <div class="d-flex justify-content-center pagination-users align-items-center">
            <Pagination CurrentPage="currentPage" PageQuantity="pageQuantity" Range="2" SelectedPage="SelectedPage" />
        </div>
    </div>
</div>

<div class="row wow fadeIn">
    <div class="col-md-8 mt-4">
        <div class="card easion-card">
            <div class="card-header">
                <div class="easion-card-icon">
                    <i class="fas fa-user-edit"></i>
                </div>
                <div class="easion-card-title"> List of customers </div>
                <div class="easion-card-menu">
                    <div class="dropdown show">
                        <a class="easion-card-menu-link" href="#" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                        </a>
                        <div class="dropdown-menu dropdown-menu-right" aria-labelledby="dropdownMenuLink">
                            <a class="dropdown-item" href="#">Action</a>
                            <a class="dropdown-item" href="#">Another action</a>
                            <a class="dropdown-item" href="#">Something else here</a>
                        </div>
                    </div>
                </div>
            </div>
            <div class="card-body">
                @if (userRoles != null)
                {
                    int i = 1;

                    <table class="table table-hover text-center">
                        <thead>
                            <tr>
                                <th scope="col">№</th>
                                <th scope="col">Email</th>
                                <th scope="col">Role</th>
                                <th scope="col">Edit</th>
                            </tr>
                        </thead>
                        @foreach (var item in userRoles)
                        {
                            <tbody>
                                <tr>
                                    <th scope="row">@(i++)</th>
                                    <td>@item.Email</td>
                                    <td>@item.UserRoles.FirstOrDefault()</td>
                                    <td>
                                        <a class="btn btn-link @(item.UserRoles.Any(role => role == Roles.Admin) ? "disabled" : null)"
                                           href="javascript:void(0)" @onclick="@(async () => await ShowEditRoles(item))">Role</a>
                                        <a class="btn btn-link" href="javascript:void(0)">Delete</a>
                                    </td>
                                </tr>
                            </tbody>
                        }
                    </table>
                }
            </div>
        </div>
    </div>

    <div class="col-md-4 mt-4">
        <div class="card easion-card">
            <div class="card-header">
                <div class="easion-card-icon">
                    <i class="fas fa-chart-bar"></i>
                </div>
                <div class="easion-card-title"> Pie Chart </div>
            </div>
            <div class="card-body" id="graph-container">
                <canvas id="pieChart"></canvas>
            </div>
        </div>
    </div>
</div>


@code {
    IEnumerable<UserRolesDto> userRoles = null;

    int currentPage = 1;
    string currentCategory = string.Empty;

    int pageQuantity;
    int quantityPerPage = 5;

    private Dictionary<string, object> Links =
        new Dictionary<string, object>
        {
            { "All", string.Empty },
            { "Users", Roles.User },
            { "Editors", Roles.Editor },
            { "Admins", Roles.Admin }
        };

    protected override async Task OnInitializedAsync()
    {
        await RefreshPage();
    }

    private async Task RefreshPage()
    {
        await GetUserRoles();

        var statistic = await GetRoleStatistics();
        //await JsRuntime.InitPieChart(statistic.Users, statistic.Editors, statistic.Admins);
        await JsRuntime.InitPieChart(1, 1, 1);

        StateHasChanged();
    }

    private async Task SelectedLink(object category)
    {
        currentPage = 1;
        currentCategory = category.ToString();

        await GetUserRoles();
    }

    private async Task SelectedPage(int page)
    {
        currentPage = page;

        await GetUserRoles();
    }

    private async Task GetUserRoles()
    {
        var httpResponse = await HttpClient
              .GetAsync($"api/UserRoles?page={currentPage}&quantityPerPage={quantityPerPage}&role={currentCategory}");

        if (httpResponse.IsSuccessStatusCode)
        {
            pageQuantity = Convert.ToInt32(httpResponse.Headers.GetValues("pageQuantity").FirstOrDefault());
            var responsString = await httpResponse.Content.ReadAsStringAsync();

            userRoles = JsonSerializer.Deserialize<List<UserRolesDto>>(responsString,
                new JsonSerializerOptions() { PropertyNameCaseInsensitive = true });
        }
        else
        {
            Console.WriteLine(httpResponse.StatusCode);
        }
    }

    private async Task<RoleStatisticsResponse> GetRoleStatistics()
    {
        return await HttpClient.GetFromJsonAsync<RoleStatisticsResponse>("api/UserRoles/GerRoleStatistics");
    }

    private async Task ShowEditRoles(UserRolesDto user)
    {
        var modalParameters = new ModalParameters();

        modalParameters.Add(nameof(EditRoles.UserRoles), user);

        var modal = Modal.Show<EditRoles>($"Роли {user.Email}", modalParameters);
        var result = await modal.Result;

        if (result.Cancelled)
        {
            await RefreshPage();
        }
    }
}
