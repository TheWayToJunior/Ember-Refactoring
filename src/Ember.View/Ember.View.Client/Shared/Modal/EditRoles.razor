@inject HttpClient http

@if (ShowErrors)
{
    <div class="alert alert-danger" role="alert">
        <p>@Error</p>
    </div>
}

@if (UserRoles.Roles != null && UserRoles.UserRoles != null)
{
    <div class="d-flex flex-column justify-content-center">
        <div class="d-block" style="margin: 15px;">
            @foreach (var item in modifiers)
            {

                <div class="form-check" style="margin: 10px;">
                    <input class="form-check-input" type="checkbox" @bind="@item.isChosen"
                           disabled="@(item.Role == Roles.Admin ? "disabled" : null)"/>
                    <label class="form-check-label">
                        @item.Role
                    </label>
                </div>

            }
        </div>
    </div>
}

<button class="btn btn-primary" @onclick="async () => await Change()">Изменить</button>
<button class="btn btn-danger" @onclick="() => BlazoredModal.Close()">Отмена</button>

@code {
    [CascadingParameter]
    BlazoredModalInstance BlazoredModal { get; set; }

    [Parameter]
    public UserRolesDto UserRoles { get; set; }

    string Error = "";
    bool ShowErrors = false;

    List<RoleModifier> modifiers;

    protected override void OnParametersSet()
    {
        modifiers = new List<RoleModifier>();

        foreach (var role in UserRoles.Roles)
        {
            modifiers.Add(new RoleModifier(role, UserRoles.UserRoles.Any(r => r == role)));
        }
    }

    private async Task Change()
    {
        var list = modifiers.Where(m => m.isChosen).Select(m => m.Role);

        var httpContent = new StringContent(JsonSerializer.Serialize(list), Encoding.UTF8, "application/json");

        var httpResponse = await http.PutAsync($"api/userroles/edit?email={UserRoles.Email}", httpContent);

        if (httpResponse.IsSuccessStatusCode)
        {
            BlazoredModal.Close(ModalResult.Cancel());
        }
        else
        {
            var responsString = await httpResponse.Content.ReadAsStringAsync();

            Error = responsString;

            ShowErrors = true;
        }
    }

    class RoleModifier
    {
        public string Role { get; private set; }

        public bool isChosen { get; set; }

        public RoleModifier(string role, bool isChosen)
        {
            this.Role = role;
            this.isChosen = isChosen;
        }
    }
}
