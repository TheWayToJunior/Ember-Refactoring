@inject HttpClient http
@inject NavigationManager navigationManager

@inject ILoginService  loginService

@if (ShowErrors)
{
    <div class="alert alert-danger" role="alert">
        <p>@Error</p>
    </div>
}

<EditForm Model="userInfo" OnValidSubmit="@(async () => await LoginUser())" @attributes="EditFormAttributes">
    <DataAnnotationsValidator />

    <div class="form-group">
        <label for="exampleInputEmail1">Введите email</label>
        <input type="email" class="form-control" id="exampleInputEmail1" aria-describedby="emailHelp" placeholder="Enter email"
               @bind="@userInfo.Email">
        <small id="emailHelp" class="form-text text-muted">We'll never share your email with anyone else.</small>
        <ValidationMessage For="@(() => userInfo.Email)" />
    </div>

    <div class="form-group">
        <label for="exampleInputPassword1">Введите пароль</label>
        <input type="password" class="form-control" id="exampleInputPassword1" placeholder="Password" @bind="@userInfo.Password">
        <ValidationMessage For="@(() => userInfo.Password)" />
    </div>
    <button type="submit" class="btn btn-primary">Войти</button>
</EditForm>

@code {
    string Error = "";
    bool ShowErrors = false;

    Dictionary<string, object> EditFormAttributes =
        new Dictionary<string, object>
        {
            { "style", "min-width:290px;" }
        };

    private UserInfo userInfo = new UserInfo();

    async Task LoginUser()
    {
        var httpContent = new StringContent(JsonSerializer.Serialize(userInfo), Encoding.UTF8, "application/json");

        var httpResponse = await http.PostAsync("api/account/login", httpContent);

        if (httpResponse.IsSuccessStatusCode)
        {
            var responseString = await httpResponse.Content.ReadAsStringAsync();

            var userToken = JsonSerializer.Deserialize<UserToken>(responseString,
                new JsonSerializerOptions() { PropertyNameCaseInsensitive = true });

            await loginService.Login(userToken);

            navigationManager.NavigateTo("/account");
        }
        else
        {
            var responsString = await httpResponse.Content.ReadAsStringAsync();

            Error = responsString;

            ShowErrors = true;
        }
    }
}